ctype_to_ftype = {
    'bool' : 'logical',
    'int' : 'integer',
    'float' : 'real',
    'double' : 'real' }

dope_CFI_cdesc_t_size = {
    'gnu' : 24,
    'cray' : 64,
    'intel' : 72,
    'xl' : 104 }

dope_CFI_dim_t_size = {
    'gnu' : 24,
    'cray' : 24,
    'intel' : 24,
    'xl' : 24 }

def write_dope_sizes(file, rank):
    file.write((
        '#ifndef DOPEY_DOPE_SIZES_H\n'
        '#define DOPEY_DOPE_SIZES_H\n'
        '\n'
        '#define DOPEY_DOPE_BASE_SIZE {BASE:d}\n'
        '#define DOPEY_DOPE_PER_DIM_SIZE {DIM:d}\n'
        '#define DOPEY_DOPE_MAX_RANK {RANK:d}\n'
        '\n'
        '#endif\n').format(
            BASE=max(dope_CFI_cdesc_t_size.values()),
            DIM=max(dope_CFI_dim_t_size.values()),
            RANK=rank)
    )

def fortran_comment(string):
    return '! ' + string

def c_comment(string):
    return '// ' + string

def prepro_comment(string):
    return '#define COMMENT ' + string + '#undef COMMENT\n'

def write_inclusion_guard(file):
    file.write((
        '#ifndef DOPEY_NOT_INCLUDED_DIRECTLY\n'
        '#error "{FILE:s} should not be included directly"\n'
        '#endif\n\n').format(
            FILE=file.name)
    )

def write_generated_warning(file, comment_fn):
    file.write(comment_fn('DO NOT EDIT THIS FILE DIRECTLY!\n'))
    file.write(comment_fn('This file was automatically generated by `generate_dope_interfaces.py`\n'))
    file.write('\n')

def write_fortran_interface(file, rank, ctype):
    file.write('module procedure :: make_dope_{RANK:d}d_c_{TYPE}\n'.format(
        RANK=rank,
        TYPE=ctype)
    )

def write_fortran_definitions(file, rank, ctype):
    file.write((
        'function make_dope_{RANK:d}d_c_{TYPE}(a) result(retval)\n'
        '  use, intrinsic :: iso_c_binding\n'
        '  implicit none\n'
        '  {FTYPE}(c_{TYPE}), dimension({DIM}), intent(in), target :: a\n'
        '  type(dope) :: retval\n'
        '  {FTYPE}(c_{TYPE}), dimension({DIM}), pointer :: p\n'
        '  \n'
        '  interface\n'
        '    subroutine make_dope_{RANK:d}d_{TYPE:s}(d,a) bind(c)\n'
        '      use, intrinsic :: iso_c_binding\n'
        '      import dope\n'
        '      implicit none\n'
        '      type(dope), intent(out) :: d\n'
        '      {FTYPE}(c_{TYPE}), dimension({DIM}), pointer, intent(in) :: a\n'
        '    end subroutine\n'
        '  end interface\n'
        '  \n'
        '  p => a\n'
        '  call make_dope_{RANK:d}d_{TYPE:s}(retval,p)\n'
        'end function\n'
        '\n').format(
                RANK=rank,
                TYPE=ctype,
                FTYPE=ctype_to_ftype[ctype],
                DIM=','.join([':' for _ in range(rank)]))
    )

def write_c_definition(file, rank, ctype):
    file.write((
        'void make_dope_{RANK:d}d_{TYPE:s}(dope_base& d, CFI_cdesc_t const& a) {{\n'
        '  assert(dope_base::base_size+a.rank*dope_base::per_rank_size <= dope_base::buffer_size);\n'
        '  std::memcpy(&d, &a, dope_base::base_size + a.rank * dope_base::per_rank_size);\n'
        '}}\n'
        '\n').format(
                RANK=rank,
                TYPE=ctype)
    )

def write_cpp_type_identifier_trait(file, ctype):
    def maybe_modified_type(ctype):
        result = ctype
        if ctype == 'bool':
            result = 'Bool'
        return result

    file.write((
        'template<>\n'
        'struct type_identifier<{TYPE:s}> {{\n'
        '  constexpr static CFI_type_t value = CFI_type_{MODTYPE:s};\n'
        '}};'
        '\n\n').format(TYPE=ctype,
                       MODTYPE=maybe_modified_type(ctype)))

def main():
    import argparse
    
    ap = argparse.ArgumentParser()
    
    ap.add_argument('RANK', type=int)
    ap.add_argument('TYPE', nargs='+')
    
    args = ap.parse_args()

    dope_sizes = open('dope_generated_sizes.h', 'w')
    write_generated_warning(dope_sizes, prepro_comment)
    write_inclusion_guard(dope_sizes)
    write_dope_sizes(dope_sizes, args.RANK)
    
    fortran_interfaces = open('dope_generated_fortran_interfaces.h', 'w')
    write_generated_warning(fortran_interfaces, fortran_comment)
    write_inclusion_guard(fortran_interfaces)
    fortran_definitions = open('dope_generated_fortran_definitions.h', 'w')
    write_generated_warning(fortran_definitions, fortran_comment)
    
    c_definitions = open('dope_generated_c_definitions.hpp', 'w')
    write_generated_warning(c_definitions, c_comment)
    write_inclusion_guard(c_definitions)

    cpp_type_identifiers = open('dope_generated_type_identifier_traits.hpp', 'w')
    write_generated_warning(cpp_type_identifiers, c_comment)
    write_inclusion_guard(cpp_type_identifiers)
    cpp_type_identifiers.write((
        'template<typename T>\n'
        'struct type_identifier {};\n'
        '\n'))
    
    for ctype in args.TYPE:
        for rank in range(1, args.RANK+1):
            write_fortran_interface(fortran_interfaces, rank, ctype)
            write_fortran_definitions(fortran_definitions, rank, ctype)
    
            write_c_definition(c_definitions, rank, ctype)

        write_cpp_type_identifier_trait(cpp_type_identifiers, ctype)

    cpp_type_identifiers.write((
        'template<typename T>\n'
        'constexpr static auto type_identifier_v = type_identifier<T>::value;\n'
        '\n'))
    
if __name__ == "__main__":
    main()
